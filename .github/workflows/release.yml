name: Create Release

on:
  push:
    tags:
      - "v*"

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      PROJECT_NAME: "Routine Flow"
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Changelog
        run: |
          # Function to improve commit messages with Gemini (batch processing)
          improve_commit_messages() {
            local section_type="$1"
            local messages="$2"
            
            if [ -n "$GEMINI_API_KEY" ] && [ -n "$messages" ]; then
              response=$(curl -s -X POST \
                "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${GEMINI_API_KEY}" \
                -H "Content-Type: application/json" \
                -d "{
                  \"contents\": [{
                    \"parts\": [{
                      \"text\": \"Transform these commit messages for a ${section_type} section in a changelog. Convert to past tense, make them user-friendly, concise and clear. Return only the improved messages, one per line, in the same order:\\n\\n${messages}\"
                    }]
                  }]
                }")
              
              improved=$(echo "$response" | grep -o '"text"[[:space:]]*:[[:space:]]*"[^"]*"' | sed 's/"text"[[:space:]]*:[[:space:]]*"//g' | sed 's/"$//g' | head -1)
              
              if [ -n "$improved" ] && [ "$improved" != "null" ]; then
                echo "$improved"
              else
                echo "$messages"
              fi
            else
              echo "$messages"
            fi
          }

          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s" $PREVIOUS_TAG..HEAD)
          else
            COMMITS=$(git log --pretty=format:"%s")
          fi

          # Process commits and collect messages by type
          FEATURES_MSGS=""
          FIXES_MSGS=""
          STYLES_MSGS=""
          DOCS_MSGS=""
          OTHERS_MSGS=""

          while IFS= read -r commit; do
            if [ -n "$commit" ]; then
              if echo "$commit" | grep -qE "^feat(\([^)]*\))?:"; then
                clean_msg=$(echo "$commit" | sed 's/^feat[^:]*: //')
                FEATURES_MSGS="${FEATURES_MSGS}${clean_msg}\n"
              elif echo "$commit" | grep -qE "^fix(\([^)]*\))?:"; then
                clean_msg=$(echo "$commit" | sed 's/^fix[^:]*: //')
                FIXES_MSGS="${FIXES_MSGS}${clean_msg}\n"
              elif echo "$commit" | grep -qE "^style(\([^)]*\))?:"; then
                clean_msg=$(echo "$commit" | sed 's/^style[^:]*: //')
                STYLES_MSGS="${STYLES_MSGS}${clean_msg}\n"
              elif echo "$commit" | grep -qE "^docs(\([^)]*\))?:"; then
                clean_msg=$(echo "$commit" | sed 's/^docs[^:]*: //')
                DOCS_MSGS="${DOCS_MSGS}${clean_msg}\n"
              else
                OTHERS_MSGS="${OTHERS_MSGS}${commit}\n"
              fi
            fi
          done <<< "$COMMITS"

          # Improve messages in batches
          FEATURES=""
          FIXES=""
          STYLES=""
          DOCS=""
          OTHERS=""

          if [ -n "$FEATURES_MSGS" ]; then
            improved_features=$(improve_commit_messages "features" "$(echo -e "$FEATURES_MSGS" | sed '/^$/d')")
            while IFS= read -r line; do
              if [ -n "$line" ]; then
                FEATURES="${FEATURES}- ${line}\n"
              fi
            done <<< "$improved_features"
          fi

          if [ -n "$FIXES_MSGS" ]; then
            improved_fixes=$(improve_commit_messages "bug fixes" "$(echo -e "$FIXES_MSGS" | sed '/^$/d')")
            while IFS= read -r line; do
              if [ -n "$line" ]; then
                FIXES="${FIXES}- ${line}\n"
              fi
            done <<< "$improved_fixes"
          fi

          if [ -n "$STYLES_MSGS" ]; then
            improved_styles=$(improve_commit_messages "UI improvements" "$(echo -e "$STYLES_MSGS" | sed '/^$/d')")
            while IFS= read -r line; do
              if [ -n "$line" ]; then
                STYLES="${STYLES}- ${line}\n"
              fi
            done <<< "$improved_styles"
          fi

          if [ -n "$DOCS_MSGS" ]; then
            improved_docs=$(improve_commit_messages "documentation" "$(echo -e "$DOCS_MSGS" | sed '/^$/d')")
            while IFS= read -r line; do
              if [ -n "$line" ]; then
                DOCS="${DOCS}- ${line}\n"
              fi
            done <<< "$improved_docs"
          fi

          if [ -n "$OTHERS_MSGS" ]; then
            improved_others=$(improve_commit_messages "general changes" "$(echo -e "$OTHERS_MSGS" | sed '/^$/d')")
            while IFS= read -r line; do
              if [ -n "$line" ]; then
                OTHERS="${OTHERS}- ${line}\n"
              fi
            done <<< "$improved_others"
          fi

          cat << EOF > release_notes.md
          ## [APP] ${PROJECT_NAME} - ${{ github.ref_name }}

          ### 📥 How to Install
          - Download the XML file attached below
          - Import the project into Tasker

          ### 📋 Changelog
          EOF

          if [ -n "$FEATURES" ]; then
            echo "- #### ✨ New Features" >> release_notes.md
            echo -e "$FEATURES" >> release_notes.md
            echo "" >> release_notes.md
          fi

          if [ -n "$FIXES" ]; then
            echo "- #### 🐛 Bug Fixes" >> release_notes.md
            echo -e "$FIXES" >> release_notes.md
            echo "" >> release_notes.md
          fi

          if [ -n "$STYLES" ]; then
            echo "- #### 🎨 UI Improvements" >> release_notes.md
            echo -e "$STYLES" >> release_notes.md
            echo "" >> release_notes.md
          fi

          if [ -n "$DOCS" ]; then
            echo "- #### 📚 Documentation" >> release_notes.md
            echo -e "$DOCS" >> release_notes.md
            echo "" >> release_notes.md
          fi

          if [ -n "$OTHERS" ]; then
            echo "- #### ⚡ Other Changes" >> release_notes.md
            echo -e "$OTHERS" >> release_notes.md
            echo "" >> release_notes.md
          fi

          cat << EOF >> release_notes.md

          ### 💡 Note
          - This release includes both the Tasker project XML and the web code needed for the project's webview.

          EOF

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} \
            --title "${PROJECT_NAME} Project ${{ github.ref_name }}" \
            --notes-file release_notes.md

          # Find only the first XML file
          xml_file=$(find . -name "*.xml" -type f | head -1)

          if [ -n "$xml_file" ]; then
            if gh release upload "${{ github.ref_name }}" "$xml_file" --clobber; then
              echo "Upload completed: $xml_file"
            else
              echo "Upload error: $xml_file"
              exit 1
            fi
          else
            echo "No XML file found for upload"
            exit 1
          fi