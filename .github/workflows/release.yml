name: Create Release

on:
  push:
    tags:
      - "v*"

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      PROJECT_NAME: "Routine Flow"
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: read
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Changelog
        run: |
          # Function to improve commit messages with Gemini
          improve_commit_message() {
            local message="$1"
            if [ -n "$GEMINI_API_KEY" ]; then
              response=$(curl -s -X POST \
                "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-latest:generateContent?key=${GEMINI_API_KEY}" \
                -H "Content-Type: application/json" \
                -d "{
                  \"contents\": [{
                    \"parts\": [{
                      \"text\": \"Transform this commit message to past tense and make it more user-friendly for a changelog. Keep it concise and clear and add in the end`[.]`. Only return the improved message, nothing else: ${message}\"
                    }]
                  }]
                }")
              
              improved=$(echo "$response" | grep -o '"text"[[:space:]]*:[[:space:]]*"[^"]*"' | sed 's/"text"[[:space:]]*:[[:space:]]*"//g' | sed 's/"$//g' | head -1)
              
              if [ -n "$improved" ] && [ "$improved" != "null" ]; then
                echo "$improved"
              else
                echo "$message"
              fi
            else
              echo "$message"
            fi
          }

          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s" $PREVIOUS_TAG..HEAD)
          else
            COMMITS=$(git log --pretty=format:"%s")
          fi

          # Process commits and improve messages
          FEATURES=""
          FIXES=""
          STYLES=""
          DOCS=""
          OTHERS=""

          while IFS= read -r commit; do
            if [ -n "$commit" ]; then
              if echo "$commit" | grep -qE "^feat(\([^)]*\))?:"; then
                clean_msg=$(echo "$commit" | sed 's/^feat[^:]*: //')
                improved_msg=$(improve_commit_message "$clean_msg")
                FEATURES="${FEATURES}- ${improved_msg}\n"
              elif echo "$commit" | grep -qE "^fix(\([^)]*\))?:"; then
                clean_msg=$(echo "$commit" | sed 's/^fix[^:]*: //')
                improved_msg=$(improve_commit_message "$clean_msg")
                FIXES="${FIXES}- ${improved_msg}\n"
              elif echo "$commit" | grep -qE "^style(\([^)]*\))?:"; then
                clean_msg=$(echo "$commit" | sed 's/^style[^:]*: //')
                improved_msg=$(improve_commit_message "$clean_msg")
                STYLES="${STYLES}- ${improved_msg}\n"
              elif echo "$commit" | grep -qE "^docs(\([^)]*\))?:"; then
                clean_msg=$(echo "$commit" | sed 's/^docs[^:]*: //')
                improved_msg=$(improve_commit_message "$clean_msg")
                DOCS="${DOCS}- ${improved_msg}\n"
              else
                improved_msg=$(improve_commit_message "$commit")
                OTHERS="${OTHERS}- ${improved_msg}\n"
              fi
            fi
          done <<< "$COMMITS"

          cat << EOF > release_notes.md
          ## [APP] ${PROJECT_NAME} - ${{ github.ref_name }}

          ### 📥 How to Install
          - Download the XML file attached below
          - Import the project into Tasker

          ### 📋 Changelog
          EOF

          if [ -n "$FEATURES" ]; then
            echo "- #### ✨ New Features" >> release_notes.md
            echo -e "$FEATURES" >> release_notes.md
            echo "" >> release_notes.md
          fi

          if [ -n "$FIXES" ]; then
            echo "- #### 🐛 Bug Fixes" >> release_notes.md
            echo -e "$FIXES" >> release_notes.md
            echo "" >> release_notes.md
          fi

          if [ -n "$STYLES" ]; then
            echo "- #### 🎨 UI Improvements" >> release_notes.md
            echo -e "$STYLES" >> release_notes.md
            echo "" >> release_notes.md
          fi

          if [ -n "$DOCS" ]; then
            echo "- #### 📚 Documentation" >> release_notes.md
            echo -e "$DOCS" >> release_notes.md
            echo "" >> release_notes.md
          fi

          if [ -n "$OTHERS" ]; then
            echo "- #### ⚡ Other Changes" >> release_notes.md
            echo -e "$OTHERS" >> release_notes.md
            echo "" >> release_notes.md
          fi

          cat << EOF >> release_notes.md

          ### 💡 Note
          - This release includes both the Tasker project XML and the web code needed for the project's webview.

          EOF

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ github.ref_name }} \
            --title "${PROJECT_NAME} Project ${{ github.ref_name }}" \
            --notes-file release_notes.md

          # Find only the first XML file
          xml_file=$(find . -name "*.xml" -type f | head -1)

          if [ -n "$xml_file" ]; then
            if gh release upload "${{ github.ref_name }}" "$xml_file" --clobber; then
              echo "[SUCCESS] Upload completed: $xml_file"
            else
              echo "[ERROR] Upload error: $xml_file"
              exit 1
            fi
          else
            echo "[WARNING] No XML file found for upload"
            exit 1
          fi